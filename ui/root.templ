package ui

import (
	"fmt"
	"github.com/troygilman/gong"
)

type RootView struct{}

templ (view RootView) Head() {
	<head>
		<meta charset="utf-8"/>
		<title>Gong</title>
		<html data-theme="light"></html>
		<script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
		<link href="/public/index.css" rel="stylesheet"/>
		<link rel="icon" type="image/x-icon" href="/public/icon.png"/>
		<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
		<link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css" rel="stylesheet"/>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js" data-manual></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-go.min.js"></script>
	</head>
}

templ (view RootView) View() {
	@initScript()
	<div class="flex flex-col h-full bg-base-100" x-data>
		<div class="drawer lg:drawer-open flex grow flex-row min-h-0">
			<input id="my-drawer" type="checkbox" class="drawer-toggle"/>
			@drawerSide()
			@drawerContent()
		</div>
	</div>
}

templ drawerSide() {
	<div class="drawer-side z-50">
		<label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
		<div class="flex flex-col h-full bg-base-100">
			<div class="navbar px-4">
				<div class="flex-1">
					<div class="flex flex-row  place-items-center gap-2">
						<image src="/public/icon.png" class="size-12"></image>
						@gong.NewLink("/") {
							<div class="text-2xl font-bold cursor-pointer">Gong</div>
						}
					</div>
				</div>
				<div class="flex-none">
					<a class="btn btn-square btn-ghost" href="https://github.com/troygilman/gong">
						@githubIcon("inline-block w-6 h-6")
					</a>
				</div>
			</div>
			<ul class="menu rounded-box w-64 p-4">
				@menuGroup("Getting Started", []menuItemProps{
					{
						label: "Introduction",
						link:  "/docs/getting-started/introduction",
					},
					{
						label: "Installation",
						link:  "/docs/getting-started/installation",
					},
					{
						label: "Tutorial",
						link:  "/docs/getting-started/tutorial",
					},
				})
				@menuGroup("Core Concepts", []menuItemProps{
					{
						label: "View",
						link:  "/docs/core-concepts/view",
					},
					{
						label: "Action",
						link:  "/docs/core-concepts/action",
					},
					{
						label: "Loader",
						link:  "/docs/core-concepts/loader",
					},
				})
			</ul>
		</div>
	</div>
}

templ menuGroup(title string, itemProps []menuItemProps) {
	<li>
		<details open>
			<summary>{ title }</summary>
			<ul>
				for _, p := range itemProps {
					@menuItem(p)
				}
			</ul>
		</details>
	</li>
}

type menuItemProps struct {
	label string
	link  string
}

templ menuItem(props menuItemProps) {
	@gong.NewLink(props.link) {
		<li>
			<a
				x-data={ fmt.Sprintf("{ active: false, pathname: '%s' }", props.link) }
				x-init="active = pathname === window.location.pathname"
				@htmx:after-swap.window="active = pathname === window.location.pathname"
				:class="active && 'menu-active'"
			>
				{ props.label }
			</a>
		</li>
	}
}

templ drawerContent() {
	<div class="drawer-content flex flex-col h-full w-full">
		<label for="my-drawer" class="btn btn-primary drawer-button lg:hidden">
			Open drawer
		</label>
		<div id="outlet-container" class="flex grow w-full min-h-0 overflow-y-scroll justify-center">
			@gong.NewOutlet().WithClass("w-full h-full")
		</div>
	</div>
}

script initScript() {
    let addCopyButtons = () => {
        // Add copy buttons to code blocks
        document.querySelectorAll('pre').forEach(block => {
            // Create the copy button
            const button = document.createElement('button');
            button.className = 'copy-button';
            button.innerHTML = 'Copy';

            // Add button to the code block
            block.appendChild(button);

            button.addEventListener('click', async () => {
                const code = block.querySelector('code');
                try {
                    await navigator.clipboard.writeText(code.innerText);
                    button.innerHTML = 'Copied!';
                    setTimeout(() => {
                        button.innerHTML = 'Copy';
                    }, 1000);
                } catch (err) {
                    console.error('Failed to copy: ', err);
                }
            });
        });
	}
	document.addEventListener('DOMContentLoaded', function() {
        Prism.highlightAll();
        addCopyButtons();
    });
    document.body.addEventListener('htmx:afterSwap', function(event) {
        Prism.highlightAllUnder(event.detail.target);
        addCopyButtons();
        document.getElementById("outlet-container").scrollTop = 0;
    });
}

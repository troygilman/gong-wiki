package ui

import (
	"fmt"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong-wiki/document"
	"github.com/troygilman/gong/form"
	"github.com/troygilman/gong/hooks"
	"github.com/troygilman/gong/link"
	"github.com/troygilman/gong/target"
	"net/http"
)

type SearchComponent struct {
	DocumentRepository document.Repository
}

templ (c SearchComponent) View() {
	<div
		x-init
		x-on:keydown.prevent.up="$dispatch('search-up'); console.log('search-up')"
		x-on:keydown.prevent.down="$dispatch('search-down'); console.log('search-down')"
		x-on:submit.prevent="$dispatch('search-submit'); console.log('search-submit')"
	>
		@form.New().
			WithMethod(http.MethodGet).
			WithSwap(gong.SwapInnerHTML).
			WithTrigger("input changed delay:200ms").
			WithAttrs(templ.Attributes{"class": "dropdown group"}) {
			<label
				id="search-label"
				for="search-input"
				class="input input-lg lg:input-sm !outline-none"
			>
				@searchIcon("size-4 fill-none stroke-current/50")
				<input
					id="search-input"
					type="search"
					name="q"
					placeholder="Search"
					autocomplete="off"
					class="w-18 lg:w-14 group-focus-within:w-48 transition-all"
				/>
			</label>
			@target.New() {
				@c.searchOptions(nil)
			}
		}
	</div>
}

templ (c SearchComponent) Action() {
	{{
		query := hooks.QueryParam(ctx, "q")
		chunks := func() []document.DocumentChunk {
			if query == "" {
				return nil
			}
			chunks, err := c.DocumentRepository.SearchDocumentChunk(query)
			if err != nil {
				panic(err)
			}
			return chunks
		}()
	}}
	@c.searchOptions(chunks)
}

templ (c SearchComponent) searchOptions(chunks []document.DocumentChunk) {
	if len(chunks) > 0 {
		<div class="dropdown-content bg-base-100 rounded-box shadow w-full max-h-64 overflow-y-scroll">
			<ul
				class="menu w-full"
				x-data="{ option: 0 }"
				x-on:search-up.window="option = Math.max(option-1, 0)"
				x-on:search-down.window="option = Math.min(option+1, htmx.findAll($el, 'li').length-1)"
				x-on:search-submit.window="htmx.findAll($el, 'a')[option].click()"
				x-effect="htmx.findAll($el, 'a')[option].scrollIntoView({ behavior: 'smooth', block: 'nearest' })"
			>
				for index, option := range chunks {
					{{
					attrs := templ.Attributes{
						"x-bind:class": fmt.Sprintf("option === %d && 'menu-active'", index),
						"x-on:click":   fmt.Sprintf("option = %d; document.activeElement.blur()", index),
					}
					}}
					<li>
						@link.New("/docs" + option.ID).WithAttrs(attrs) {
							<div class="flex flex-col">
								<div>
									{ option.Name }
								</div>
								<div class="text-xs text-current/50">
									{ option.Document }
								</div>
							</div>
						}
					</li>
				}
			</ul>
		</div>
	}
}

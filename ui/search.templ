package ui

import "github.com/troygilman/gong"
import "net/http"
import "github.com/troygilman/gong-wiki/document"

type SearchComponent struct {
	DocumentRepository document.Repository
}

templ (c SearchComponent) View() {
	@gong.NewForm().
		WithMethod(http.MethodGet).
		WithSwap(gong.SwapInnerHTML).
		WithTrigger("input changed delay:200ms").
		WithAttrs(templ.Attributes{"class": "dropdown group"}) {
		<label id="search-label" for="search-input" class="input input-sm !outline-none">
			@searchIcon("size-4 fill-none stroke-current/50")
			<input
				id="search-input"
				type="search"
				name="q"
				placeholder="Search"
				autocomplete="off"
				aria-autocomplete="list"
				aria-controls="search-listbox"
				aria-labelledby="search-label"
				class="w-14 group-focus-within:w-48 transition-all"
			/>
		</label>
		@gong.NewTarget() {
			@c.searchOptions(nil)
		}
	}
}

templ (c SearchComponent) Action() {
	{{
		query := gong.QueryParam(ctx, "q")
		chunks := func() []document.DocumentChunk {
			if query == "" {
				return nil
			}
			chunks, err := c.DocumentRepository.SearchDocumentChunk(query)
			if err != nil {
				panic(err)
			}
			return chunks
		}()
	}}
	@c.searchOptions(chunks)
}

templ (c SearchComponent) searchOptions(chunks []document.DocumentChunk) {
	if len(chunks) > 0 {
		<ul
			id="search-listbox"
			role="listbox"
			aria-labelledby="search-label"
			class="menu dropdown-content bg-base-100 w-full rounded-box shadow"
		>
			for _, option := range chunks {
				<li role="option">
					@gong.NewLink("/docs" + option.DocumentName + "#" + option.ChunkID) {
						{ option.ChunkID }
					}
				</li>
			}
		</ul>
	}
}

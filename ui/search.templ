package ui

import (
	"fmt"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong-wiki/document"
	"net/http"
	"strconv"
)

type SearchComponent struct {
	DocumentRepository document.Repository
}

templ (c SearchComponent) View() {
	<div
		x-on:keydown.prevent.up="$dispatch('search-up')"
		x-on:keydown.prevent.down="$dispatch('search-down')"
		x-on:submit.prevent="$dispatch('search-submit')"
	>
		@gong.NewForm().
			WithMethod(http.MethodGet).
			WithSwap(gong.SwapInnerHTML).
			WithTrigger("input changed delay:200ms").
			WithAttrs(templ.Attributes{"class": "dropdown group"}) {
			<label
				id="search-label"
				for="search-input"
				class="input input-sm !outline-none"
			>
				@searchIcon("size-4 fill-none stroke-current/50")
				<input
					id="search-input"
					type="search"
					name="q"
					placeholder="Search"
					autocomplete="off"
					aria-autocomplete="list"
					aria-controls="search-listbox"
					aria-labelledby="search-label"
					class="w-14 group-focus-within:w-48 transition-all"
				/>
			</label>
			@gong.NewTarget() {
				@c.searchOptions(nil)
			}
		}
	</div>
}

templ (c SearchComponent) Action() {
	{{
		query := gong.QueryParam(ctx, "q")
		chunks := func() []document.DocumentChunk {
			if query == "" {
				return nil
			}
			chunks, err := c.DocumentRepository.SearchDocumentChunk(query)
			if err != nil {
				panic(err)
			}
			return chunks
		}()
	}}
	@c.searchOptions(chunks)
}

templ (c SearchComponent) searchOptions(chunks []document.DocumentChunk) {
	if len(chunks) > 0 {
		<ul
			id="search-listbox"
			role="listbox"
			aria-labelledby="search-label"
			class="menu dropdown-content bg-base-100 w-full rounded-box shadow"
			x-data="{ option: -1, getOption() { return this.option }, reset() { this.option = 0 } }"
			x-on:search-up.window="option = Math.max(option-1, 0); console.log(option)"
			x-on:search-down.window="option = Math.max(Math.min(option+1, $el.querySelectorAll('li').length-1), 0); console.log(option)"
			x-on:search-submit.window="$el.querySelector('#search-option-' + option).click()"
		>
			for index, option := range chunks {
				{{
				attrs := templ.Attributes{
					"x-init":       "console.log('option loaded')",
					"x-bind:class": fmt.Sprintf("getOption() == %d && 'menu-focus'", index),
				}
				}}
				<li role="option">
					@gong.NewLink("/docs" + option.ID).WithAttrs(attrs).WithID("search-option-" + strconv.Itoa(index)) {
						{ option.Name }
					}
				</li>
			}
		</ul>
	}
}

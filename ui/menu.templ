package ui

import (
	"github.com/troygilman/gong"
	"strings"
)

type MenuComponent struct {
	Props []MenuGroupProps
}

templ (c MenuComponent) View() {
	@gong.NewTarget().WithTrigger(gong.TriggerAfterSwapOOB(gong.OutletID(ctx))) {
		@Menu(c.Props)
	}
}

templ (c MenuComponent) Action() {
	@Menu(c.Props)
}

templ Menu(props []MenuGroupProps) {
	{{
		path := gong.ChildRoute(ctx).FullPath()
	}}
	<div class="flex flex-col">
		<div class="navbar px-4">
			@gong.NewLink("/").WithAttrs(templ.Attributes{"class": "flex flex-row place-items-center gap-2 cursor-pointer"}) {
				@logoIcon("size-10 fill-current")
				<div class="text-4xl lg:text-2xl font-bold">Gong</div>
			}
		</div>
		<ul class="menu rounded-box w-full text-scale">
			for _, group := range props {
				@MenuGroup(group, path)
			}
		</ul>
	</div>
}

templ MenuGroup(props MenuGroupProps, path string) {
	<li>
		<details open>
			<summary class="menu-item">{ props.Label }</summary>
			<ul>
				for _, item := range props.Items {
					@MenuItem(item, item.Link == path)
				}
			</ul>
		</details>
	</li>
}

templ MenuItem(props MenuItemProps, active bool) {
	{{
		attrs := templ.Attributes{
			"class": templ.Classes(
				"menu-item",
				templ.KV("bg-primary/50 text-primary-content", active),
			).String(),
		}
	}}
	<li>
		@gong.NewLink(props.Link).
			WithID(buildMenuLinkID(props.Link)).
			WithAttrs(attrs) {
			{ props.Label }
		}
	</li>
}

func buildMenuLinkID(path string) string {
	return "link" + strings.ReplaceAll(path, "/", "-")
}

type MenuGroupProps struct {
	Label string
	Items []MenuItemProps
}

type MenuItemProps struct {
	Label string
	Link  string
}

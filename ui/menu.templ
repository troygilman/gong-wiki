package ui

import (
	"github.com/troygilman/gong"
	"strings"
)

type MenuComponent struct {
	props []MenuGroupProps
}

func NewMenuComponent(props []MenuGroupProps) gong.Component {
	return gong.NewComponent(MenuComponent{
		props: props,
	})
}

templ (c MenuComponent) View() {
	@gong.NewTarget() {
		@Menu(c.props)
	}
}

templ (c MenuComponent) Action() {
	@Menu(c.props)
}

templ Menu(props []MenuGroupProps) {
	{{
		path := gong.ChildRoute(ctx).FullPath()
	}}
	<div class="flex flex-col">
		<div class="navbar px-4">
			@gong.NewLink("/").WithSwap(gong.SwapInnerHTML) {
				<div class="flex flex-row place-items-center gap-2 cursor-pointer">
					<image src="/public/icon.png" class="size-18 lg:size-14"></image>
					<div class="text-4xl lg:text-2xl font-bold">Gong</div>
				</div>
			}
		</div>
		<ul class="menu rounded-box w-full text-scale">
			for _, group := range props {
				@MenuGroup(group, path)
			}
		</ul>
	</div>
}

templ MenuGroup(props MenuGroupProps, path string) {
	<li>
		<details open>
			<summary class="text-nowrap hover:bg-primary hover:text-primary-content transition-colors">{ props.Label }</summary>
			<ul>
				for _, item := range props.Items {
					@MenuItem(item, item.Link == path)
				}
			</ul>
		</details>
	</li>
}

templ MenuItem(props MenuItemProps, active bool) {
	@gong.NewLink(props.Link).
		WithID(buildMenuLinkID(props.Link)).
		WithSwap(gong.SwapInnerHTML) {
		<li>
			<a class={ "hover:bg-primary hover:text-primary-content transition-colors", templ.KV("menu-active", active) }>
				{ props.Label }
			</a>
		</li>
	}
}

func buildMenuLinkID(path string) string {
	return "link" + strings.ReplaceAll(path, "/", "-")
}

type MenuGroupProps struct {
	Label string
	Items []MenuItemProps
}

type MenuItemProps struct {
	Label string
	Link  string
}

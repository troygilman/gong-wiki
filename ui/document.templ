package ui

import (
	"context"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong-wiki/document"
	"io"
)

type DocumentComponent struct {
	doc  *document.Document
	prev *document.Document
	next *document.Document
}

func NewDocumentComponent(
	doc *document.Document,
	prev *document.Document,
	next *document.Document,
) gong.Component {
	return gong.NewComponent(DocumentComponent{
		doc:  doc,
		prev: prev,
		next: next,
	})
}

templ (c DocumentComponent) View() {
	<div class="flex flex-row w-full h-full">
		<div class="flex flex-col gap-4 place-items-center grow min-w-0 w-7xl overflow-y-auto scroll-smooth p-4 max-w-7xl">
			<div class="prose max-w-full w-full pb-4 text-scale">
				@templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
					_, err := io.WriteString(w, c.doc.Html())
					return err
				})
			</div>
			<div class="flex flex-row w-full justify-between">
				<div>
					if c.prev != nil {
						@gong.Link("/docs" + c.prev.Path()) {
							<div class="btn btn-scale btn-soft hover:btn-primary group">
								@arrowIcon("size-8 fill-base-content group-hover:fill-primary-content rotate-180")
								<div class="flex flex-col place-items-start">
									<div class="text-sm lg:text-xs">Previous</div>
									<div class="font-bold">
										{ c.prev.Metadata().Label }
									</div>
								</div>
							</div>
						}
					}
				</div>
				<div>
					if c.next != nil {
						@gong.Link("/docs" + c.next.Path()) {
							<div class="btn btn-scale btn-soft hover:btn-primary group">
								<div class="flex flex-col place-items-end">
									<div class="text-sm lg:text-xs">Next</div>
									<div class="font-bold">
										{ c.next.Metadata().Label }
									</div>
								</div>
								@arrowIcon("size-8 fill-base-content group-hover:fill-primary-content")
							</div>
						}
					}
				</div>
			</div>
		</div>
		@headerTree(c.doc.Node())
	</div>
}

templ headerTree(node *document.Node) {
	{{
		children := node.Children()
	}}
	<div class="prose text-scale hidden lg:flex max-w-64 min-w-64 overflow-y-auto">
		<ul class="list-none list-outside px-2">
			if len(children) > 0 {
				for _, child := range children[0].Children() {
					@documentNode(child)
				}
			}
		</ul>
	</div>
}

templ documentNode(node *document.Node) {
	{{
		children := node.Children()
	}}
	<li class="p-0">
		<a
			class="flex flex-row no-underline group"
			href={ templ.URL("#" + node.ID()) }
		>
			<div class="divider divider-horizontal group-hover:divider-secondary transition-all m-0"></div>
			<div class="ml-1 text-current/50 group-hover:text-secondary transition-colors">
				{ node.Title() }
			</div>
		</a>
		if len(children) > 0 {
			<ul class="list-none list-outside">
				for _, child := range node.Children() {
					@documentNode(child)
				}
			</ul>
		}
	</li>
}
